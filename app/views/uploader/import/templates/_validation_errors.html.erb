<% counter = 0 %>
<% records.each.with_index do |record, i| %>
  <%= t.fields_for( :import_records, record) do |r| %>
    <% r.object[:record_errors] ||= Hash.new %>
    <table class="wizard responsive import-fields" id="import-fields-<%= i %>">
      <thead>
        <tr>
          <th class="tenantrex_field">
            <span>TenantRex Field</span>
          </th>
          <th class="client_field"><span>Values from your spreadsheet matching</span></th>
          </th>
        </tr>
      </thead>
      <tbody>
          <% if r.object.record_errors["geocode_info"].present? and r.object.record_errors["geocode_addresses"].nil? %>
          <tr class="record-row geoinfo">
            <td class="geocode <%= r.object.id %> error" colspan="2">
              <p>The following issues were found with this address:</p>
              <% #r.object.record_errors["geocode_info"].each do |info| %>
              <% info = r.object.record_errors["geocode_info"] %>
                <p><%= info %></p>
              <% #end %>
              <ul>
                <% if r.object.record_errors["geocode_addresses"].present? and r.object.record_errors["geocode_addresses"].length == 1 %>
                  <% r.object.record_errors["geocode_addresses"].each_with_index do |addr, i| %>
                  <%= radio_button_tag :addr, "#{i}_#{r.object.id}", nil, class: 'geocode-address-select' %>
                  <%= label_tag "addr_#{i}_#{r.object.id}", addr["full_address"], :data => addr.except("full_address").merge({"id" => r.object.id})%>
                <%end%>
              <%end%>
              </ul>
            </td>
          </tr>
          <%end%>
          <% if r.object.record_errors["geocode_addresses"].present? && r.object.record_errors["geocode_addresses"].length > 1  %>
            <tr class="record-row geoaddress_error">
              <td class="geocode <%= r.object.id %> error" colspan="2">
                <p>Found more than one matching address. Did you mean:</p><br />
                <ul>
                  <% r.object.record_errors["geocode_addresses"].each_with_index do |addr, i| %>
                    <li>
                      <%= radio_button_tag :addr, "#{i}_#{r.object.id}" %>
                      <%= label_tag "addr_#{i}_#{r.object.id}", addr["full_address"], :data => addr.except("full_address").merge({"id" => r.object.id})%>
                    </li>
                  <%end%>
                </ul>
              </td>
              <td></td>
            </tr>
          <%end%>

        <% if r.object.record_errors["stepped_errors"] %>
          <tr class="record-row step_error">
            <td class="geocode <%= r.object.id %> error" colspan="2">
              <p><%= r.object.record_errors["stepped_errors"].html_safe %></p>
            </td>
          </tr>
        <%end%>

        <% Naturalsorter::Sorter.sort_by_method(r.object.data, "first", true).each_with_index do |d, i| %>
          <% errors = r.object.record_errors.find {|e| e[0] == d[0] } %>
          <% if controller.action_name == 'filter_by_geocode' and ['address1', 'suite', 'city', 'state', 'zipcode'].include? d[0] %>
            <tr class="record-row extra">
          <% else %>
            <tr class="record-row extra<%= ' valid" style="display: none;'.html_safe if !errors %>">
          <% end %>
              <td class="tenantrex_field <%= "error" if errors or (controller.action_name == 'filter_by_geocode' and ['address1', 'suite', 'city', 'state', 'zipcode'].include? d[0]) %>">
                <%= r.label d[0].to_s, :class => "cell"%>
                <% if errors or (controller.action_name == 'filter_by_geocode' and ['address1', 'suite', 'city', 'state', 'zipcode'].include? d[0]) %>
                <div class="errors">
                  <% if errors.blank? %>
                  <p class="error"><span>Geocode Error</span></p>
                  <% else %>
                  <%= simple_format "<span>"+ d[0].to_s.humanize + " " + errors[1].to_sentence + "</span>", :class => "error"%>
                  <% end %>
                </div>
                <%end%>
              </td>
              <td class="client_field <%= "stepped" if r.object.record_errors["stepped_errors"] && Importer.is_stepped_rent_params(d[0]) %>">
                <% value = (d[1].split('_').map(&:capitalize).join(' ') if d[1].is_a? String) || d[1].to_s %>
                <% if errors or (controller.action_name == 'filter_by_geocode' and ['address1', 'suite', 'city', 'state', 'zipcode'].include? d[0]) %>
                    <%
                      onfocus = ""
                      counter += 1
                      case d[0].to_s
                        when 'address1'
                          id_for_address="autocomplete#{r.object.id.to_s}"
                          onfocus = 'geolocate()'
                          %>
                        <input type="hidden" id="street_number<%=r.object.id.to_s%>"><input type="hidden" id="route<%=r.object.id.to_s%>">
                        <%
                        when 'city'
                          id_for_address="locality#{r.object.id.to_s}"
                        when 'state'
                        id_for_address="administrative_area_level_1#{r.object.id.to_s}"
                      end
                    %>
                    <%= r.text_field d[0].to_s, :value => value, :class => "cell #{d[0].to_s}", :id => "#{id_for_address}", :onfocus => onfocus  %>
                <% else %>
                <%= r.text_field d[0].to_s, :value => value, :class => "cell #{d[0].to_s}", :id => "#{r.object.id}#{d[0].to_s}", :disabled => true %>
                <%= r.hidden_field d[0].to_s, :value => d[1] %>
                <% end %>
              </td>
            </tr>
        <%end%>
        </tbody>
        <tfoot>
          <tr>
            <td colspan="2" style="text-align:right">
              <%= hidden_field_tag :record, i %>
              <%= r.hidden_field :id %>
              <% if controller.action_name == 'filter_by_geocode' %>
              <%= r.hidden_field 'latitude', :value=>'', :id=> "#{record.id}latitude" %>
              <%= r.hidden_field 'longitude', :value=>'', :id=>"#{record.id}longitude" %>
              <% end %>
              <%= content_tag :button, :type => "button", :class => "btn view-import-record" do %><span>Show/Hide Details</span><%end%>
              <%= content_tag :button, :type => "button", :class => "btn btn-red validate-import-record" do %><span>Update</span><%end%>
            </td>
          </tr>
        </tfoot>
      </tbody>
    </table>
  <%end%>
<%end%>
<%= will_paginate records %>

<script>

  $( document ).ready(function() {
  var placeSearch;
  var componentForm = {
    street_number: 'short_name',
    route: 'long_name',
    locality: 'long_name',
    administrative_area_level_1: 'short_name',
    country: 'long_name',
    postal_code: 'short_name'
  };

  function initAutocomplete() {
// Create the autocomplete object, restricting the search to geographical
// location types.
    <% while counter > 0 %>

    autocomplete<%=counter%> = new google.maps.places.Autocomplete(document.getElementById('autocomplete<%=counter%>'), {
      types: ['geocode']
    });
    autocomplete<%=counter%>.addListener('place_changed', function() {
      fillInAddress(autocomplete<%=counter%>, '<%=counter%>');
    });
    <% counter-=1 %>

    <% end %>

  }

  function fillInAddress(autocomplete, unique) {
// Get the place details from the autocomplete object.
    var place = autocomplete.getPlace();

    for (var component in componentForm) {
      if (!!document.getElementById(component + unique)) {
        document.getElementById(component + unique).value = '';
        document.getElementById(component + unique).disabled = false;
      }
    }

// Get each component of the address from the place details
// and fill the corresponding field on the form.
    for (var i = 0; i < place.address_components.length; i++) {
      var addressType = place.address_components[i].types[0];
      if (componentForm[addressType] && document.getElementById(addressType + unique)) {
        var val = place.address_components[i][componentForm[addressType]];
        document.getElementById(addressType + unique).value = val;
        document.getElementById('autocomplete' + unique).value = document.getElementById('street_number' + unique).value + ' ' + document.getElementById('route' + unique).value
      }
    }
  }
  google.maps.event.addDomListener(window, "load", initAutocomplete);

  function geolocate() {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(function(position) {
        var geolocation = {
          lat: position.coords.latitude,
          lng: position.coords.longitude
        };
        var circle = new google.maps.Circle({
          center: geolocation,
          radius: position.coords.accuracy
        });
      });
    }
  }
  });
</script>